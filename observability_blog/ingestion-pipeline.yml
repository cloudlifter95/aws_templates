AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Ingestion pipeline of event bridge events
Parameters:
  # EventSourceName:
  #   Type: String
  #   # AllowedPattern: aws\.partner(/[\.\-_A-Za-z0-9]+){2,}
  #   MinLength: 0
  #   MaxLength: 256
  #   Description: Name of the Amazon EventBridge SaaS Partner Event Source to associate with an Event Bus. For example, aws.partner/example.com/1234567890/test-event-source.
  #   Default: "eventbusfortest"
  DeliveryStreamName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9_.-]*"
    MinLength: 0
    MaxLength: 64
    Description: Name of the Amazon Kinesis Data Firehose Delivery Stream to create
    Default: ""
  BucketName:
    Type: String
    Default: ""
    AllowedPattern: "[a-zA-Z0-9.-]*"
    MaxLength: 63
    Description: Name of the Amazon S3 Bucket to create. Leave blank for an automatically generated name.
  LogYear:
    Type: String
    Default: "2023"
    AllowedPattern: "[0-9]*"
    MaxLength: 4
    Description: Year to filter

Conditions:
  AutoGenerateBucketName: !Equals [!Ref BucketName, ""]
  AutoGenerateDeliveryStreamName: !Equals [!Ref DeliveryStreamName, ""]

Resources:
  # EventBridgeEventBus:
  #   Type: AWS::Events::EventBus
  #   Properties:
  #     # EventSourceName: !Ref EventSourceName
  #     Name: !Ref EventSourceName # to randomize later

  # StoredQuery:
  #   Type: AWS::Config::StoredQuery
  #   Properties: 
  #     QueryDescription: Query to get select most recent rows from a table
  #     QueryExpression: |
  #       Select
  #           a.time, a.stackname, a.stackstatus
  #       from
  #           observability.cflogs_table a
  #           inner join (
  #               select
  #                   stackname,
  #                   max(time) as maxtime
  #               from
  #                   observability.cflogs_table
  #               group by
  #                   stackname
  #           ) b on a.stackname = b.stackname
  #           and a.time = b.maxtime

  #     QueryName: cf-stacks-status
  #     # Tags: 
  #     #   - Tag

  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref 'AWS::AccountId'
      DatabaseInput: 
        Description: for athena
        Name: observability

  GlueTable:
    Type: AWS::Glue::Table
    Properties: 
      CatalogId: !Ref 'AWS::AccountId'
      DatabaseName: !Ref GlueDatabase
      TableInput: 
        Description: CF-Logs
        Name: cflogs_table
        Owner: observability
        # PartitionKeys: 
        #   - Name: year
        #     Type: int
        #   - Name: month
        #     Type: int
        #   - Name: day
        #     Type: int
        StorageDescriptor: 
          Columns: 
            - Name: version
              Type: string
            - Name: id
              Type: string
            - Name: detail-type
              Type: string
            - Name: source
              Type: string
            - Name: account
              Type: string
            - Name: time
              Type: string
            - Name: region
              Type: string
            - Name: resources
              Type: array<string>
            - Name: detail
              Type: struct<stack-id:string,status-details:struct<status:string,status-reason:string>>
            - Name: stackname
              Type: string
            - Name: stackstatus
              Type: string
          Compressed: False
          Location: !Join 
            - ''
            - - 's3://'
              - !Ref S3Bucket
              - /
              - !Ref LogYear
              - /
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          SerdeInfo: 
            SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
        TableType: EXTERNAL_TABLE

  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: catch-all CF events rule for event bus
      # EventBusName: !Ref EventBridgeEventBus
      EventPattern:
        source: ["aws.cloudformation"]
        detail-type: ["CloudFormation Stack Status Change"]
      Name: catch-all-CF-events-rule
      State: ENABLED
      Targets:
        - Arn: !GetAtt KinesisDataFirehoseDeliveryStream.Arn
          Id: kinesis-firehose-delivery-stream
          RoleArn: !GetAtt EventBridgeKinesisDataFirehoseTargetRole.Arn

  EventBridgeKinesisDataFirehoseTargetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: eventbridge-to-kinesis-firehose-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - firehose:PutRecord
                Resource:
                  - !GetAtt KinesisDataFirehoseDeliveryStream.Arn

  KinesisDataFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref AWS::AccountId
      Path: /
      Policies:
        - PolicyName: kinesis-firehose-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource:
                  - !Sub ${S3Bucket.Arn}
                  - !Sub ${S3Bucket.Arn}/*
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                  - "lambda:GetFunctionConfiguration"
                Resource:
                  - !Sub "${StreamProcessFunction.Arn}"

  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess # remove later TODO

  StreamProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.9
      CodeUri: ./processor_function
      Role: !GetAtt FunctionRole.Arn
      Timeout: 60

  PermissionToInvokeLambdaFromFirehose:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StreamProcessFunction
      Action: "lambda:InvokeFunction"
      Principal: "firehose.amazonaws.com"
      SourceArn: !GetAtt KinesisDataFirehoseDeliveryStream.Arn

  KinesisDataFirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName:
        !If [
          AutoGenerateDeliveryStreamName,
          !Ref "AWS::NoValue",
          !Ref DeliveryStreamName,
        ]
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt S3Bucket.Arn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1
        CloudWatchLoggingOptions:
          Enabled: false
          # LogGroupName:
          # LogStreamName:
        CompressionFormat: UNCOMPRESSED
        RoleARN: !GetAtt KinesisDataFirehoseRole.Arn
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Type: Lambda
              Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt StreamProcessFunction.Arn

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName:
        !If [AutoGenerateBucketName, !Ref "AWS::NoValue", !Ref BucketName]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

Outputs:
  EventBridgeRule:
    Description: "EventBridge Rule ARN"
    Value: !GetAtt EventBridgeRule.Arn
  EventBridgeKinesisDataFirehoseTargetRole:
    Description: "EventBridge Kinesis Data Firehose Target IAM Role"
    Value: !GetAtt EventBridgeKinesisDataFirehoseTargetRole.Arn
  KinesisDataFirehoseDeliveryStream:
    Description: "Kinesis Data Firehose Delivery Stream ARN"
    Value: !GetAtt KinesisDataFirehoseDeliveryStream.Arn
  KinesisDataFirehoseRole:
    Description: "Kinesis Data Firehose Delivery Stream IAM Role"
    Value: !GetAtt KinesisDataFirehoseRole.Arn
  S3Bucket:
    Description: "S3 Bucket ARN"
    Value: !GetAtt S3Bucket.Arn
