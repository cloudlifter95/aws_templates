AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::Serverless-2016-10-31

Description: Create a variable number of EC2 instance resources.

Parameters:
  InstanceName:
    Description: Name of EC2 instance
    Type: String
    ConstraintDescription: must be a valid EC2 instance string name.
    Default: modev

  InstanceType:
    Description: Basic EC2 instance type
    Type: String
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - t3.medium
      - t3.small
    Default: t3.medium
    ConstraintDescription: must be a valid EC2 instance type.

  ImageId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

  VpcId:
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    Type: String

  SubnetId:
    Description: SubnetId of an existing subnet in your Virtual Private Cloud (VPC)
    Type: String

  PrivateIpAddress:
    Description: Private IP address. Use this field to force replacement on update
    Type: String
    Default: ""

  RuleState:
    Type: String
    AllowedValues:
      - enabled
      - disabled
    Default: enabled
    Description: "A parameter that can only have the value 'enabled', 'disabled'"

  Threshold:
    Type: Number
    Description: "An integer parameter representing the threshold number of retries"
    MinValue: 1
    MaxValue: 10
    Default: 2
  
  WaitInMinutes:
    Type: Number
    Description: "An integer parameter representing the threshold number of retries"
    MinValue: 5
    MaxValue: 15
    Default: 10

  VoidParamForUpdate:
    Type: Number
    Description: "An integer parameter to simulate an update"
    Default: 0

Mappings: {}
Conditions:
  PrivateIpAddressRef: !Not
    - !Equals ["", !Ref PrivateIpAddress]

Resources:
  EC2SSMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: ["ec2.amazonaws.com"]
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess"
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2SSMRole
  EC2Instance:
    DependsOn: 
      # - CFSignalerCustomResource # Deprecated
      - MasterEventBridgeRule
      - CFSignalerFunction
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT240M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          init_setup: [update_cfn, echo_command, signal_success]
          update: [update_cfn]

        update_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=5
              mode: "000400"
              owner: root
              group: root

            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --configsets update --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: root
              group: root
        echo_command:
          commands:
            10_echo:
              command: echo "run ok"

          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  [
                    /etc/cfn/cfn-hup.conf,
                    /etc/cfn/hooks.d/cfn-auto-reloader.conf,
                  ]

        signal_success:
          files:
            /tmp/signal_success.bash:
              mode: "000700"
              owner: root
              group: root
              context:
                stackid: !Ref AWS::StackId
                region: !Ref AWS::Region
              content: |
                #!/bin/bash -xe
                echo ""
                echo "signal success to the stack"
                sudo /opt/aws/bin/cfn-signal -s true --stack {{stackid}} --resource EC2Instance --region {{region}}
          commands:
            10_signal_success_test:
              command: echo "signal_success"
            20_signal_success:
              command: sudo /bin/bash /tmp/signal_success.bash

    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      # SubnetId: !Ref SubnetId
      IamInstanceProfile: !Ref EC2InstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true" # internet access required for ssm
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetId
          PrivateIpAddress: !If [PrivateIpAddressRef, !Ref PrivateIpAddress, !Ref AWS::NoValue]
      # SecurityGroupIds:
      #   - !Ref SecurityGroup
      # KeyName: !Ref KeyName
      Tags:
        - Key: project
          Value: modev
        - Key: Name
          Value: !Ref InstanceName
        - Key: transaction.health
          Value: complete # by default complete; will be changed by CFSignaler upon failure.
      Monitoring: false
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -xe
          echo "entering userdata"
          sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          # sudo systemctl enable amazon-ssm-agent
          sudo systemctl status amazon-ssm-agent

          ### not needed. just for reference
          #sudo yum install -y aws-cfn-bootstrap
          #sudo systemctl restart cfn-hup

          yum update -y aws-cfn-bootstrap

          # Check if stack is in CREATE_IN_PROGRESS state
          stack_status=$(aws cloudformation describe-stacks --stack-name ${AWS::StackName} --query "Stacks[0].StackStatus" --region ${AWS::Region} --output text 2>&1)
          if [[ $? -ne 0 ]]; then
            echo "Failed to describe stack. Error: $stack_status"
            stack_status="DENIED"
          fi

          if [[ "$stack_status" == "CREATE_IN_PROGRESS" ]]; then
            echo "Stack is in CREATE_IN_PROGRESS state. Sending cfn-init signal."
            /opt/aws/bin/cfn-init -s true --stack ${AWS::StackId} --resource EC2Instance --configsets init_setup --region ${AWS::Region}
          elif [[ "$stack_status" == "DENIED" || "$stack_status" == *"IN_PROGRESS" ]]; then
            echo "Stack status is DENIED or UPDATE_IN_PROGRESS. Exiting with success (letting signal be handled externally)"
            exit 0
          fi

          # Start cfn-init
          echo "userdata script: start cfn-init. log files: /var/log/cloud-init.log , /var/log/cloud-init-output.log, /var/log/cfn-init-cmd.log , /var/log/cfn-init.log "
          # /opt/aws/bin/cfn-init -v -s ${AWS::StackId} -r EC2Instance --region ${AWS::Region} --configsets init_setup || error_exit 'Failed to run cfn-init'

          ##### done within config set run by cfn-init, but could be done from userdata like following:
          # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
          # /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
          # All done so signal success
          # /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WebServerHost --region ${AWS::Region}

          # /usr/local/bin/cfn-signal -s true --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Enable HTTP access via port 80/22/443 and ICMP access via port *
      # SecurityGroupIngress:
      # - IpProtocol: tcp
      #   FromPort: "80"
      #   ToPort: "80"
      #   CidrIp: 0.0.0.0/0
      # - IpProtocol: tcp
      #   FromPort: "8888"
      #   ToPort: "8888"
      #   CidrIp: 0.0.0.0/0
      # - IpProtocol: tcp
      #   FromPort: "443"
      #   ToPort: "443"
      #   CidrIp: 0.0.0.0/0
      # - IpProtocol: icmp
      #   FromPort: "-1"
      #   ToPort: "-1"
      #   CidrIp: 0.0.0.0/0
      # - IpProtocol: tcp
      #   FromPort: "22"
      #   ToPort: "22"
      #   CidrIp: !Ref SSHLocation

  # CFSignalerCustomResource: # Deprecated
  #   Type: 'Custom::MyCustomResource'
  #   Properties:
  #     ServiceToken: !GetAtt CFSignalerFunction.Arn
  #     SchedulerSSMParameter: !Ref SchedulerSSMParameter

  CFSignalerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess # to tighten
        - arn:aws:iam::aws:policy/AdministratorAccess # to remove
      # Policies:
      #   - PolicyName: "AllowSSMAutomation"
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Effect: "Allow"
      #           Action: "ssm:SendCommand"
      #           Resource: "*"
      #         - Effect: "Allow"
      #           Action: "ssm:ListCommands"
      #           Resource: "*"

  CFSignalerFunction:
    DependsOn: 
      - SchedulerSSMParameter
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "CFSignalerFunction-${AWS::StackName}"
      Role: !GetAtt CFSignalerFunctionRole.Arn
      CodeUri: ./functions/CFSignalerFunction
      Handler: app.lambda_handler
      Runtime: python3.10
      Timeout: 240
      Environment:
        Variables:
          LogicalResourceId: "EC2Instance" #! Important: Should be the CF logical name of ec2instance to check and monitor
          SchedulerName: !Sub "CFSignalerRule-${AWS::StackName}"
          Threshold: !Ref Threshold
          SchedulerSSMParameter: !Ref SchedulerSSMParameter
          StackName: !Sub "${AWS::StackName}"
      # Layers:
      #   - !Ref Layer

  EventBridgeRule: # Scheduled event bridge rule for temporal loop
    DependsOn: MasterEventBridgeRule
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Sub "CFSignalerRule-${AWS::StackName}"
      ScheduleExpression: !Sub "rate(${WaitInMinutes} minutes)"
      State: "DISABLED" # * Now Disabled by default to avoid spamming; will be set up . # Deprecated pattern: Initially enabled for the process to bootstart on existing products without the feature.
      Targets:
        - Arn: !GetAtt CFSignalerFunction.Arn
          Id: "CFSignalerFunction"
          Input: !Sub |
            {
              "RequestId":"__Event__",
              "ResourceProperties": {
                "StackName": "${AWS::StackName}",
                "Event":"CFSignalerRule-${AWS::StackName}"
              }
            }
  
  MasterEventBridgeRule: # On RunInstances event rule that initializes temporal loop
    DependsOn:
      - SchedulerSSMParameter
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "CFSignalerRule-${AWS::StackName}-Master"
      Description: EventBridge rule to trigger on RunInstances events
      State: "ENABLED"
      EventPattern:
        source:
          - "aws.ec2"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "ec2.amazonaws.com"
          eventName:
            - "RunInstances"
      Targets:
        - Arn: !GetAtt CFSignalerFunction.Arn
          Id: "CFSignalerFunction"

  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt CFSignalerFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventBridgeRule.Arn
  
  LambdaInvokePermissionForMaster:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt CFSignalerFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt MasterEventBridgeRule.Arn

  SchedulerSSMParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/${AWS::StackName}/CFSignalerFunction/SchedulerFlag"
      Type: "String"
      Value: !Sub "${RuleState}_increment_0"
      Description: "This parameter is used to store a the scheduler state"

Outputs:
  InstanceId:
    Description: Instance Id of newly created instance
    Value: !Ref EC2Instance
  VoidParamForUpdateOutput:
    Description: Void parameter value
    Value: !Ref VoidParamForUpdate
